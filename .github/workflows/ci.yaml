name: Go CI

on:
  push:
    branches: [ "main" ]
  pull_request:

jobs:
  test:
    name: Test & Coverage
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:24.0-dind
        options: --privileged
        ports:
          - 2375:2375
        env:
          DOCKER_TLS_CERTDIR: ""
    env:
      REDIS_URL: "redis://localhost:6379/"
      GMP_GEOCODE_URL: "https://maps.googleapis.com/maps/api/geocode/"
      GMP_WEATHER_URL: "https://weather.googleapis.com/v1/"
      OWM_WEATHER_URL: "https://api.openweathermap.org/data/3.0/onecall?"
      OMETEO_WEATHER_URL: "https://api.open-meteo.com/v1/forecast?"
      CURRENT_INTERVAL_MIN: 10
      HOURLY_INTERVAL_MIN: 60
      DAILY_INTERVAL_MIN: 720
      GMP_KEY: ${{ secrets.GMP_KEY }}
      OWM_KEY: ${{ secrets.OWM_KEY }}
      DB_URL: ${{ secrets.DB_URL }}
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.x'

    - name: Wait for Docker and print logs on failure
      run: |
        echo "Waiting for Docker to start..."
        for i in `seq 1 60`; do
          if docker info > /dev/null 2>&1; then
            echo "Docker is ready!"
            break
          fi
          echo -n "."
          sleep 2
        done

        if ! docker info > /dev/null 2>&1; then
          echo "Docker did not start in time."
          echo "--- Docker Service Logs ---"
          docker ps -a
          docker logs $(docker ps -aq)
          exit 1
        fi

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install Frontend Dependencies
      run: npm install
      working-directory: ./frontend

    - name: Build Frontend
      run: npm run build
      working-directory: ./frontend

    - name: Run tests and generate coverage
      run: go test -v -covermode=atomic -coverprofile=coverage.out ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.out

    - name: Run GoSec security scanner
      run: |
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        gosec ./...

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Frontend Dependencies
        run: npm install
        working-directory: ./frontend

      - name: Build Frontend
        run: npm run build
        working-directory: ./frontend

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
