// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: current_weather.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createCurrentWeather = `-- name: CreateCurrentWeather :one
INSERT INTO current_weather (
    id,
    location_id,
    source_api,
    updated_at,
    temperature_c,
    humidity,
    wind_speed_kmh,
    precipitation_mm,
    condition_text
)
VALUES (gen_random_uuid(), $1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, location_id, source_api, updated_at, temperature_c, humidity, wind_speed_kmh, precipitation_mm, condition_text
`

type CreateCurrentWeatherParams struct {
	LocationID      uuid.UUID
	SourceApi       string
	UpdatedAt       time.Time
	TemperatureC    sql.NullFloat64
	Humidity        sql.NullInt32
	WindSpeedKmh    sql.NullFloat64
	PrecipitationMm sql.NullFloat64
	ConditionText   sql.NullString
}

func (q *Queries) CreateCurrentWeather(ctx context.Context, arg CreateCurrentWeatherParams) (CurrentWeather, error) {
	row := q.db.QueryRowContext(ctx, createCurrentWeather,
		arg.LocationID,
		arg.SourceApi,
		arg.UpdatedAt,
		arg.TemperatureC,
		arg.Humidity,
		arg.WindSpeedKmh,
		arg.PrecipitationMm,
		arg.ConditionText,
	)
	var i CurrentWeather
	err := row.Scan(
		&i.ID,
		&i.LocationID,
		&i.SourceApi,
		&i.UpdatedAt,
		&i.TemperatureC,
		&i.Humidity,
		&i.WindSpeedKmh,
		&i.PrecipitationMm,
		&i.ConditionText,
	)
	return i, err
}

const deleteAllCurrentWeather = `-- name: DeleteAllCurrentWeather :exec
DELETE FROM current_weather
`

func (q *Queries) DeleteAllCurrentWeather(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllCurrentWeather)
	return err
}

const deleteAllCurrentWeatherFromAPI = `-- name: DeleteAllCurrentWeatherFromAPI :exec
DELETE FROM current_weather WHERE source_api=$1
`

func (q *Queries) DeleteAllCurrentWeatherFromAPI(ctx context.Context, sourceApi string) error {
	_, err := q.db.ExecContext(ctx, deleteAllCurrentWeatherFromAPI, sourceApi)
	return err
}

const deleteCurrentWeatherAtLocation = `-- name: DeleteCurrentWeatherAtLocation :exec
DELETE FROM current_weather WHERE location_id=$1
`

func (q *Queries) DeleteCurrentWeatherAtLocation(ctx context.Context, locationID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCurrentWeatherAtLocation, locationID)
	return err
}

const deleteCurrentWeatherAtLocationFromAPI = `-- name: DeleteCurrentWeatherAtLocationFromAPI :exec
DELETE FROM current_weather WHERE location_id=$1 AND source_api=$2
`

type DeleteCurrentWeatherAtLocationFromAPIParams struct {
	LocationID uuid.UUID
	SourceApi  string
}

func (q *Queries) DeleteCurrentWeatherAtLocationFromAPI(ctx context.Context, arg DeleteCurrentWeatherAtLocationFromAPIParams) error {
	_, err := q.db.ExecContext(ctx, deleteCurrentWeatherAtLocationFromAPI, arg.LocationID, arg.SourceApi)
	return err
}

const getCurrentWeatherAtLocation = `-- name: GetCurrentWeatherAtLocation :many
SELECT id, location_id, source_api, updated_at, temperature_c, humidity, wind_speed_kmh, precipitation_mm, condition_text FROM current_weather WHERE location_id=$1
`

func (q *Queries) GetCurrentWeatherAtLocation(ctx context.Context, locationID uuid.UUID) ([]CurrentWeather, error) {
	rows, err := q.db.QueryContext(ctx, getCurrentWeatherAtLocation, locationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CurrentWeather
	for rows.Next() {
		var i CurrentWeather
		if err := rows.Scan(
			&i.ID,
			&i.LocationID,
			&i.SourceApi,
			&i.UpdatedAt,
			&i.TemperatureC,
			&i.Humidity,
			&i.WindSpeedKmh,
			&i.PrecipitationMm,
			&i.ConditionText,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCurrentWeatherAtLocationFromAPI = `-- name: GetCurrentWeatherAtLocationFromAPI :one
SELECT id, location_id, source_api, updated_at, temperature_c, humidity, wind_speed_kmh, precipitation_mm, condition_text FROM current_weather WHERE location_id=$1 AND source_api=$2
`

type GetCurrentWeatherAtLocationFromAPIParams struct {
	LocationID uuid.UUID
	SourceApi  string
}

func (q *Queries) GetCurrentWeatherAtLocationFromAPI(ctx context.Context, arg GetCurrentWeatherAtLocationFromAPIParams) (CurrentWeather, error) {
	row := q.db.QueryRowContext(ctx, getCurrentWeatherAtLocationFromAPI, arg.LocationID, arg.SourceApi)
	var i CurrentWeather
	err := row.Scan(
		&i.ID,
		&i.LocationID,
		&i.SourceApi,
		&i.UpdatedAt,
		&i.TemperatureC,
		&i.Humidity,
		&i.WindSpeedKmh,
		&i.PrecipitationMm,
		&i.ConditionText,
	)
	return i, err
}

const updateCurrentWeather = `-- name: UpdateCurrentWeather :one
UPDATE current_weather
SET updated_at=$2, temperature_c=$3, humidity=$4, wind_speed_kmh=$5, precipitation_mm=$6, condition_text=$7
WHERE id=$1
RETURNING id, location_id, source_api, updated_at, temperature_c, humidity, wind_speed_kmh, precipitation_mm, condition_text
`

type UpdateCurrentWeatherParams struct {
	ID              uuid.UUID
	UpdatedAt       time.Time
	TemperatureC    sql.NullFloat64
	Humidity        sql.NullInt32
	WindSpeedKmh    sql.NullFloat64
	PrecipitationMm sql.NullFloat64
	ConditionText   sql.NullString
}

func (q *Queries) UpdateCurrentWeather(ctx context.Context, arg UpdateCurrentWeatherParams) (CurrentWeather, error) {
	row := q.db.QueryRowContext(ctx, updateCurrentWeather,
		arg.ID,
		arg.UpdatedAt,
		arg.TemperatureC,
		arg.Humidity,
		arg.WindSpeedKmh,
		arg.PrecipitationMm,
		arg.ConditionText,
	)
	var i CurrentWeather
	err := row.Scan(
		&i.ID,
		&i.LocationID,
		&i.SourceApi,
		&i.UpdatedAt,
		&i.TemperatureC,
		&i.Humidity,
		&i.WindSpeedKmh,
		&i.PrecipitationMm,
		&i.ConditionText,
	)
	return i, err
}
