// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: locations.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createLocation = `-- name: CreateLocation :one
INSERT INTO locations (id, city_name, latitude, longitude, country_code)
VALUES (gen_random_uuid(), $1, $2, $3, $4)
RETURNING id, city_name, latitude, longitude, country_code, timezone
`

type CreateLocationParams struct {
	CityName    string
	Latitude    float64
	Longitude   float64
	CountryCode string
}

func (q *Queries) CreateLocation(ctx context.Context, arg CreateLocationParams) (Location, error) {
	row := q.db.QueryRowContext(ctx, createLocation,
		arg.CityName,
		arg.Latitude,
		arg.Longitude,
		arg.CountryCode,
	)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.CityName,
		&i.Latitude,
		&i.Longitude,
		&i.CountryCode,
		&i.Timezone,
	)
	return i, err
}

const deleteAllLocations = `-- name: DeleteAllLocations :exec
DELETE FROM locations
`

func (q *Queries) DeleteAllLocations(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllLocations)
	return err
}

const deleteLocation = `-- name: DeleteLocation :exec
DELETE FROM locations WHERE id=$1
`

func (q *Queries) DeleteLocation(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteLocation, id)
	return err
}

const getLocationByCoordinates = `-- name: GetLocationByCoordinates :one
SELECT id, city_name, latitude, longitude, country_code, timezone FROM locations WHERE latitude=$1 AND longitude=$2
`

type GetLocationByCoordinatesParams struct {
	Latitude  float64
	Longitude float64
}

func (q *Queries) GetLocationByCoordinates(ctx context.Context, arg GetLocationByCoordinatesParams) (Location, error) {
	row := q.db.QueryRowContext(ctx, getLocationByCoordinates, arg.Latitude, arg.Longitude)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.CityName,
		&i.Latitude,
		&i.Longitude,
		&i.CountryCode,
		&i.Timezone,
	)
	return i, err
}

const getLocationByName = `-- name: GetLocationByName :one
SELECT id, city_name, latitude, longitude, country_code, timezone FROM locations WHERE city_name=$1
`

func (q *Queries) GetLocationByName(ctx context.Context, cityName string) (Location, error) {
	row := q.db.QueryRowContext(ctx, getLocationByName, cityName)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.CityName,
		&i.Latitude,
		&i.Longitude,
		&i.CountryCode,
		&i.Timezone,
	)
	return i, err
}

const listLocations = `-- name: ListLocations :many
SELECT id, city_name, latitude, longitude, country_code, timezone FROM locations ORDER BY city_name ASC
`

func (q *Queries) ListLocations(ctx context.Context) ([]Location, error) {
	rows, err := q.db.QueryContext(ctx, listLocations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Location
	for rows.Next() {
		var i Location
		if err := rows.Scan(
			&i.ID,
			&i.CityName,
			&i.Latitude,
			&i.Longitude,
			&i.CountryCode,
			&i.Timezone,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTimezone = `-- name: UpdateTimezone :exec
UPDATE locations
SET timezone = $2
WHERE id = $1
`

type UpdateTimezoneParams struct {
	ID       uuid.UUID
	Timezone sql.NullString
}

func (q *Queries) UpdateTimezone(ctx context.Context, arg UpdateTimezoneParams) error {
	_, err := q.db.ExecContext(ctx, updateTimezone, arg.ID, arg.Timezone)
	return err
}
