// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: daily_forecasts.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createDailyForecast = `-- name: CreateDailyForecast :one
INSERT INTO daily_forecasts (
    id,
    location_id,
    source_api,
    forecast_date,
    updated_at,
    min_temp_c,
    max_temp_c,
    precipitation_mm,
    precipitation_chance_percent,
    wind_speed_kmh,
    humidity 
)
VALUES (gen_random_uuid(), $1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING id, location_id, source_api, forecast_date, updated_at, min_temp_c, max_temp_c, precipitation_mm, precipitation_chance_percent, wind_speed_kmh, humidity
`

type CreateDailyForecastParams struct {
	LocationID                 uuid.UUID
	SourceApi                  string
	ForecastDate               time.Time
	UpdatedAt                  time.Time
	MinTempC                   sql.NullFloat64
	MaxTempC                   sql.NullFloat64
	PrecipitationMm            sql.NullFloat64
	PrecipitationChancePercent sql.NullInt32
	WindSpeedKmh               sql.NullFloat64
	Humidity                   sql.NullInt32
}

// CreateDailyForecast inserts a new daily forecast record.
func (q *Queries) CreateDailyForecast(ctx context.Context, arg CreateDailyForecastParams) (DailyForecast, error) {
	row := q.db.QueryRowContext(ctx, createDailyForecast,
		arg.LocationID,
		arg.SourceApi,
		arg.ForecastDate,
		arg.UpdatedAt,
		arg.MinTempC,
		arg.MaxTempC,
		arg.PrecipitationMm,
		arg.PrecipitationChancePercent,
		arg.WindSpeedKmh,
		arg.Humidity,
	)
	var i DailyForecast
	err := row.Scan(
		&i.ID,
		&i.LocationID,
		&i.SourceApi,
		&i.ForecastDate,
		&i.UpdatedAt,
		&i.MinTempC,
		&i.MaxTempC,
		&i.PrecipitationMm,
		&i.PrecipitationChancePercent,
		&i.WindSpeedKmh,
		&i.Humidity,
	)
	return i, err
}

const deleteAllDailyForecasts = `-- name: DeleteAllDailyForecasts :exec
DELETE FROM daily_forecasts
`

// DeleteAllDailyForecasts deletes all daily forecasts from the database.
func (q *Queries) DeleteAllDailyForecasts(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllDailyForecasts)
	return err
}

const deleteDailyForecastsAtLocation = `-- name: DeleteDailyForecastsAtLocation :exec
DELETE FROM daily_forecasts WHERE location_id=$1
`

// DeleteDailyForecastsAtLocation deletes all daily forecasts for a specific location.
func (q *Queries) DeleteDailyForecastsAtLocation(ctx context.Context, locationID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteDailyForecastsAtLocation, locationID)
	return err
}

const deleteDailyForecastsAtLocationFromAPI = `-- name: DeleteDailyForecastsAtLocationFromAPI :exec
DELETE FROM daily_forecasts WHERE location_id=$1 AND source_api=$2
`

type DeleteDailyForecastsAtLocationFromAPIParams struct {
	LocationID uuid.UUID
	SourceApi  string
}

// DeleteDailyForecastsAtLocationFromAPI deletes all daily forecasts for a specific location and API source.
func (q *Queries) DeleteDailyForecastsAtLocationFromAPI(ctx context.Context, arg DeleteDailyForecastsAtLocationFromAPIParams) error {
	_, err := q.db.ExecContext(ctx, deleteDailyForecastsAtLocationFromAPI, arg.LocationID, arg.SourceApi)
	return err
}

const deleteDailyForecastsFromApi = `-- name: DeleteDailyForecastsFromApi :exec
DELETE FROM daily_forecasts WHERE source_api=$1
`

// DeleteDailyForecastsFromApi deletes all daily forecasts from a specific API source.
func (q *Queries) DeleteDailyForecastsFromApi(ctx context.Context, sourceApi string) error {
	_, err := q.db.ExecContext(ctx, deleteDailyForecastsFromApi, sourceApi)
	return err
}

const getAllDailyForecastsAtLocation = `-- name: GetAllDailyForecastsAtLocation :many
SELECT id, location_id, source_api, forecast_date, updated_at, min_temp_c, max_temp_c, precipitation_mm, precipitation_chance_percent, wind_speed_kmh, humidity FROM daily_forecasts WHERE location_id=$1
`

// GetAllDailyForecastsAtLocation retrieves all daily forecasts for a specific location.
func (q *Queries) GetAllDailyForecastsAtLocation(ctx context.Context, locationID uuid.UUID) ([]DailyForecast, error) {
	rows, err := q.db.QueryContext(ctx, getAllDailyForecastsAtLocation, locationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DailyForecast
	for rows.Next() {
		var i DailyForecast
		if err := rows.Scan(
			&i.ID,
			&i.LocationID,
			&i.SourceApi,
			&i.ForecastDate,
			&i.UpdatedAt,
			&i.MinTempC,
			&i.MaxTempC,
			&i.PrecipitationMm,
			&i.PrecipitationChancePercent,
			&i.WindSpeedKmh,
			&i.Humidity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDailyForecastAtLocationAndDate = `-- name: GetDailyForecastAtLocationAndDate :many
SELECT id, location_id, source_api, forecast_date, updated_at, min_temp_c, max_temp_c, precipitation_mm, precipitation_chance_percent, wind_speed_kmh, humidity FROM daily_forecasts WHERE location_id=$1 AND forecast_date=$2
`

type GetDailyForecastAtLocationAndDateParams struct {
	LocationID   uuid.UUID
	ForecastDate time.Time
}

// GetDailyForecastAtLocationAndDate retrieves all daily forecasts for a specific location and date.
func (q *Queries) GetDailyForecastAtLocationAndDate(ctx context.Context, arg GetDailyForecastAtLocationAndDateParams) ([]DailyForecast, error) {
	rows, err := q.db.QueryContext(ctx, getDailyForecastAtLocationAndDate, arg.LocationID, arg.ForecastDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DailyForecast
	for rows.Next() {
		var i DailyForecast
		if err := rows.Scan(
			&i.ID,
			&i.LocationID,
			&i.SourceApi,
			&i.ForecastDate,
			&i.UpdatedAt,
			&i.MinTempC,
			&i.MaxTempC,
			&i.PrecipitationMm,
			&i.PrecipitationChancePercent,
			&i.WindSpeedKmh,
			&i.Humidity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDailyForecastAtLocationAndDateFromAPI = `-- name: GetDailyForecastAtLocationAndDateFromAPI :one
SELECT id, location_id, source_api, forecast_date, updated_at, min_temp_c, max_temp_c, precipitation_mm, precipitation_chance_percent, wind_speed_kmh, humidity FROM daily_forecasts WHERE location_id=$1 AND forecast_date=$2 AND source_api=$3
`

type GetDailyForecastAtLocationAndDateFromAPIParams struct {
	LocationID   uuid.UUID
	ForecastDate time.Time
	SourceApi    string
}

// GetDailyForecastAtLocationAndDateFromAPI retrieves the daily forecast for a specific location, date, and API source.
func (q *Queries) GetDailyForecastAtLocationAndDateFromAPI(ctx context.Context, arg GetDailyForecastAtLocationAndDateFromAPIParams) (DailyForecast, error) {
	row := q.db.QueryRowContext(ctx, getDailyForecastAtLocationAndDateFromAPI, arg.LocationID, arg.ForecastDate, arg.SourceApi)
	var i DailyForecast
	err := row.Scan(
		&i.ID,
		&i.LocationID,
		&i.SourceApi,
		&i.ForecastDate,
		&i.UpdatedAt,
		&i.MinTempC,
		&i.MaxTempC,
		&i.PrecipitationMm,
		&i.PrecipitationChancePercent,
		&i.WindSpeedKmh,
		&i.Humidity,
	)
	return i, err
}

const getUpcomingDailyForecastsAtLocation = `-- name: GetUpcomingDailyForecastsAtLocation :many
SELECT id, location_id, source_api, forecast_date, updated_at, min_temp_c, max_temp_c, precipitation_mm, precipitation_chance_percent, wind_speed_kmh, humidity FROM daily_forecasts
WHERE location_id = $1 AND forecast_date >= $2
ORDER BY forecast_date ASC
`

type GetUpcomingDailyForecastsAtLocationParams struct {
	LocationID   uuid.UUID
	ForecastDate time.Time
}

// GetUpcomingDailyForecastsAtLocation retrieves all upcoming daily forecasts for a specific location.
func (q *Queries) GetUpcomingDailyForecastsAtLocation(ctx context.Context, arg GetUpcomingDailyForecastsAtLocationParams) ([]DailyForecast, error) {
	rows, err := q.db.QueryContext(ctx, getUpcomingDailyForecastsAtLocation, arg.LocationID, arg.ForecastDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DailyForecast
	for rows.Next() {
		var i DailyForecast
		if err := rows.Scan(
			&i.ID,
			&i.LocationID,
			&i.SourceApi,
			&i.ForecastDate,
			&i.UpdatedAt,
			&i.MinTempC,
			&i.MaxTempC,
			&i.PrecipitationMm,
			&i.PrecipitationChancePercent,
			&i.WindSpeedKmh,
			&i.Humidity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDailyForecast = `-- name: UpdateDailyForecast :one
UPDATE daily_forecasts
SET updated_at=$2, forecast_date=$3, min_temp_c=$4, max_temp_c=$5, precipitation_mm=$6, precipitation_chance_percent=$7, wind_speed_kmh=$8, humidity=$9
WHERE id=$1
RETURNING id, location_id, source_api, forecast_date, updated_at, min_temp_c, max_temp_c, precipitation_mm, precipitation_chance_percent, wind_speed_kmh, humidity
`

type UpdateDailyForecastParams struct {
	ID                         uuid.UUID
	UpdatedAt                  time.Time
	ForecastDate               time.Time
	MinTempC                   sql.NullFloat64
	MaxTempC                   sql.NullFloat64
	PrecipitationMm            sql.NullFloat64
	PrecipitationChancePercent sql.NullInt32
	WindSpeedKmh               sql.NullFloat64
	Humidity                   sql.NullInt32
}

// UpdateDailyForecast updates an existing daily forecast record.
func (q *Queries) UpdateDailyForecast(ctx context.Context, arg UpdateDailyForecastParams) (DailyForecast, error) {
	row := q.db.QueryRowContext(ctx, updateDailyForecast,
		arg.ID,
		arg.UpdatedAt,
		arg.ForecastDate,
		arg.MinTempC,
		arg.MaxTempC,
		arg.PrecipitationMm,
		arg.PrecipitationChancePercent,
		arg.WindSpeedKmh,
		arg.Humidity,
	)
	var i DailyForecast
	err := row.Scan(
		&i.ID,
		&i.LocationID,
		&i.SourceApi,
		&i.ForecastDate,
		&i.UpdatedAt,
		&i.MinTempC,
		&i.MaxTempC,
		&i.PrecipitationMm,
		&i.PrecipitationChancePercent,
		&i.WindSpeedKmh,
		&i.Humidity,
	)
	return i, err
}
