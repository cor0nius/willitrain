// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: location_aliases.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createLocationAlias = `-- name: CreateLocationAlias :one
INSERT INTO location_aliases (alias, location_id)
VALUES ($1, $2)
RETURNING alias, location_id
`

type CreateLocationAliasParams struct {
	Alias      string
	LocationID uuid.UUID
}

// CreateLocationAlias creates a new alias for a location.
func (q *Queries) CreateLocationAlias(ctx context.Context, arg CreateLocationAliasParams) (LocationAlias, error) {
	row := q.db.QueryRowContext(ctx, createLocationAlias, arg.Alias, arg.LocationID)
	var i LocationAlias
	err := row.Scan(&i.Alias, &i.LocationID)
	return i, err
}

const getLocationByAlias = `-- name: GetLocationByAlias :one
SELECT l.id, l.city_name, l.latitude, l.longitude, l.country_code, l.timezone FROM locations l JOIN location_aliases la ON l.id = la.location_id
WHERE la.alias = $1
`

// GetLocationByAlias retrieves a location's details by its alias.
func (q *Queries) GetLocationByAlias(ctx context.Context, alias string) (Location, error) {
	row := q.db.QueryRowContext(ctx, getLocationByAlias, alias)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.CityName,
		&i.Latitude,
		&i.Longitude,
		&i.CountryCode,
		&i.Timezone,
	)
	return i, err
}
