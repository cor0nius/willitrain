// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: hourly_forecasts.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createHourlyForecast = `-- name: CreateHourlyForecast :one
INSERT INTO hourly_forecasts (
    id,
    location_id,
    source_api,
    forecast_datetime_utc,
    temperature_c,
    humidity,
    wind_speed_kmh,
    precipitation_mm
)
VALUES (gen_random_uuid(), $1, $2, $3, $4, $5, $6, $7)
RETURNING id, location_id, source_api, forecast_datetime_utc, temperature_c, humidity, wind_speed_kmh, precipitation_mm
`

type CreateHourlyForecastParams struct {
	LocationID          uuid.UUID
	SourceApi           string
	ForecastDatetimeUtc time.Time
	TemperatureC        sql.NullFloat64
	Humidity            sql.NullInt32
	WindSpeedKmh        sql.NullFloat64
	PrecipitationMm     sql.NullFloat64
}

func (q *Queries) CreateHourlyForecast(ctx context.Context, arg CreateHourlyForecastParams) (HourlyForecast, error) {
	row := q.db.QueryRowContext(ctx, createHourlyForecast,
		arg.LocationID,
		arg.SourceApi,
		arg.ForecastDatetimeUtc,
		arg.TemperatureC,
		arg.Humidity,
		arg.WindSpeedKmh,
		arg.PrecipitationMm,
	)
	var i HourlyForecast
	err := row.Scan(
		&i.ID,
		&i.LocationID,
		&i.SourceApi,
		&i.ForecastDatetimeUtc,
		&i.TemperatureC,
		&i.Humidity,
		&i.WindSpeedKmh,
		&i.PrecipitationMm,
	)
	return i, err
}

const deleteAllHourlyForecasts = `-- name: DeleteAllHourlyForecasts :exec
DELETE FROM hourly_forecasts
`

func (q *Queries) DeleteAllHourlyForecasts(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllHourlyForecasts)
	return err
}

const deleteHourlyForecastsAtLocation = `-- name: DeleteHourlyForecastsAtLocation :exec
DELETE FROM hourly_forecasts WHERE location_id=$1
`

func (q *Queries) DeleteHourlyForecastsAtLocation(ctx context.Context, locationID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteHourlyForecastsAtLocation, locationID)
	return err
}

const deleteHourlyForecastsAtLocationFromAPI = `-- name: DeleteHourlyForecastsAtLocationFromAPI :exec
DELETE FROM hourly_forecasts WHERE location_id=$1 AND source_api=$2
`

type DeleteHourlyForecastsAtLocationFromAPIParams struct {
	LocationID uuid.UUID
	SourceApi  string
}

func (q *Queries) DeleteHourlyForecastsAtLocationFromAPI(ctx context.Context, arg DeleteHourlyForecastsAtLocationFromAPIParams) error {
	_, err := q.db.ExecContext(ctx, deleteHourlyForecastsAtLocationFromAPI, arg.LocationID, arg.SourceApi)
	return err
}

const deleteHourlyForecastsFromAPI = `-- name: DeleteHourlyForecastsFromAPI :exec
DELETE FROM hourly_forecasts WHERE source_api=$1
`

func (q *Queries) DeleteHourlyForecastsFromAPI(ctx context.Context, sourceApi string) error {
	_, err := q.db.ExecContext(ctx, deleteHourlyForecastsFromAPI, sourceApi)
	return err
}

const getHourlyForecastAtLocationAndTime = `-- name: GetHourlyForecastAtLocationAndTime :many
SELECT id, location_id, source_api, forecast_datetime_utc, temperature_c, humidity, wind_speed_kmh, precipitation_mm FROM hourly_forecasts WHERE location_id=$1 AND forecast_datetime_utc=$2
`

type GetHourlyForecastAtLocationAndTimeParams struct {
	LocationID          uuid.UUID
	ForecastDatetimeUtc time.Time
}

func (q *Queries) GetHourlyForecastAtLocationAndTime(ctx context.Context, arg GetHourlyForecastAtLocationAndTimeParams) ([]HourlyForecast, error) {
	rows, err := q.db.QueryContext(ctx, getHourlyForecastAtLocationAndTime, arg.LocationID, arg.ForecastDatetimeUtc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HourlyForecast
	for rows.Next() {
		var i HourlyForecast
		if err := rows.Scan(
			&i.ID,
			&i.LocationID,
			&i.SourceApi,
			&i.ForecastDatetimeUtc,
			&i.TemperatureC,
			&i.Humidity,
			&i.WindSpeedKmh,
			&i.PrecipitationMm,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHourlyForecastAtLocationAndTimeFromAPI = `-- name: GetHourlyForecastAtLocationAndTimeFromAPI :one
SELECT id, location_id, source_api, forecast_datetime_utc, temperature_c, humidity, wind_speed_kmh, precipitation_mm FROM hourly_forecasts WHERE location_id=$1 AND forecast_datetime_utc=$2 AND source_api=$3
`

type GetHourlyForecastAtLocationAndTimeFromAPIParams struct {
	LocationID          uuid.UUID
	ForecastDatetimeUtc time.Time
	SourceApi           string
}

func (q *Queries) GetHourlyForecastAtLocationAndTimeFromAPI(ctx context.Context, arg GetHourlyForecastAtLocationAndTimeFromAPIParams) (HourlyForecast, error) {
	row := q.db.QueryRowContext(ctx, getHourlyForecastAtLocationAndTimeFromAPI, arg.LocationID, arg.ForecastDatetimeUtc, arg.SourceApi)
	var i HourlyForecast
	err := row.Scan(
		&i.ID,
		&i.LocationID,
		&i.SourceApi,
		&i.ForecastDatetimeUtc,
		&i.TemperatureC,
		&i.Humidity,
		&i.WindSpeedKmh,
		&i.PrecipitationMm,
	)
	return i, err
}

const updateHourlyForecast = `-- name: UpdateHourlyForecast :one
UPDATE hourly_forecasts
SET forecast_datetime_utc=$2, temperature_c=$3, humidity=$4, wind_speed_kmh=$5, precipitation_mm=$6
WHERE id=$1
RETURNING id, location_id, source_api, forecast_datetime_utc, temperature_c, humidity, wind_speed_kmh, precipitation_mm
`

type UpdateHourlyForecastParams struct {
	ID                  uuid.UUID
	ForecastDatetimeUtc time.Time
	TemperatureC        sql.NullFloat64
	Humidity            sql.NullInt32
	WindSpeedKmh        sql.NullFloat64
	PrecipitationMm     sql.NullFloat64
}

func (q *Queries) UpdateHourlyForecast(ctx context.Context, arg UpdateHourlyForecastParams) (HourlyForecast, error) {
	row := q.db.QueryRowContext(ctx, updateHourlyForecast,
		arg.ID,
		arg.ForecastDatetimeUtc,
		arg.TemperatureC,
		arg.Humidity,
		arg.WindSpeedKmh,
		arg.PrecipitationMm,
	)
	var i HourlyForecast
	err := row.Scan(
		&i.ID,
		&i.LocationID,
		&i.SourceApi,
		&i.ForecastDatetimeUtc,
		&i.TemperatureC,
		&i.Humidity,
		&i.WindSpeedKmh,
		&i.PrecipitationMm,
	)
	return i, err
}
